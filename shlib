#!/bin/sh
# --------------------------------------------------------------------------------------- INIT
home=~/.shlib
excludepattern=shlib
overwrite=0
# --------------------------------------------------------------------------------------- FUNC
## Check file existance. It will exit if file doesn't exist
##	param $1 file to check
check_existance(){
	if [ ! -f $1 ]
	then
		echo "Script doesn't exist"
		exit 1
	fi
}
## Check overwrite call for existing file. It will exit if user denies permission
## 	param $1 file to check
check_overwrite(){
	if [ -f $1 ]
	then
		echo -n "Script already exists. Do you really want to overwrite [y/N]? "
		read choice
		if [ "$choice" != "y" ]
		then
			exit 1
		fi
	fi
} 
## Print shlib manual
print_man() {
	echo "Usage:"
	echo -e "\t shlib [-l] [-E] [-a -o script] [-n -o script] [-e script] [-r script...] [-I -o archive]"
	echo "Description:"
	echo -e "\t shlib manages personal shell scripts. Scripts can be used as traditional command in linux terminal."
	echo "Option:"
	echo -e "\t -a | all \t Add an existing script to the library. The name of th file should be extensionless\n\t\t\t and it will be the name of the command."
	echo -e "\t -n | new \t Add a new script to the library and automaticaly open vim to edit its."
	echo -e "\t -e | edit \t Edit an existing script of the library."
	echo -e "\t -l | list \t Print the list of all library's scripts."
	echo -e "\t -r | remove \t Remove a script or a list of scripts from the library."
	echo -e "\t -E | export \t Export all library's scripts saving them in a compressed archive."
	echo -e "\t -I | import \t Import all scripts in a compressed archive."
	echo -e "\t -o \t\t Adding this options to some other, force to overwrite any existing script with\n\t\t\t the same name."
}
## Parse file name in a string path and store it in "filename" variable
## 	param $1 path to parse
parse_path(){
	filename=$(basename $1)
}
# --------------------------------------------------------------------------------------- MAIN
case $1 in
	"-a"|"add")
		case $2 in
			"-o")
				check_existance $3
				parse_path $3
				cp $3 $home
				chmod 775 $home/$filename
			;;
			"")
				print_man
			;;
			*)
				check_existance $3
				parse_path $2
				check_overwrite $home/$filename
				cp $2 $home
				chmod 775 $home/$filename
			;;
		esac
	;;
	"-n"|"new")
		case $2 in
			"-o")
				touch $home/$3
				chmod 777 $home/$3
				echo "#!/bin/sh" > $home/$3
				echo >> $home/$3
				chmod 775 $home/$3
				vim +2 -c 'startinsert' $home/$3
			;;
			"")
				print_man
			;;
			*)
				check_overwrite $home/$2
				touch $home/$2
				chmod 777 $home/$2
				echo "#!/bin/sh" > $home/$2
				echo >> $home/$2
				chmod 775 $home/$2
				vim +2 -c 'startinsert' $home/$2
			;;
		esac
	;;
	"-e"|"edit")
		if [ "$2" = "" ]
		then
			print_man
		elif [ -f $home/$2 ]
		then
			vim $home/$2
		else
			echo "Target script doesn't exist"
		fi
	;;
	"-l"|"list")
		ls -1 --hide=$excludepattern $home 
	;;
	"-r"|"remove")
		if [ "$2" = "" ]
		then
			print_man
		else
			for script in "$@"
			do
				if [ "$script" != "-r" ]
				then
					rm -f $home/$script
				fi
			done
		fi
	;;
	"-E"|"export")
		tar -zcvf shlib-$(date +%F).tar.gz --exclude=$excludepattern -C $home .
	;;
	"-I"|"import")
		case $2 in
			"-o")
				check_existance $3
				parse_path $3
				cp $3 $home
				tar -zxcf --overwrite $home/$filename
				rm $home/$filename
			;;
			"")
				print_man
			;;						
			*)
				check_existance $2
				tmp=/tmp/shlib
				rm -f $tmp
				mkdir $tmp
				parse_path $2
				cp $2 $tmp
				tar -zxcf --overwrite $tmp/$filename
				yesallcheck=0
				for script in $tmp
				do
					if [ $yesallcheck -ne 1 ]
					then
						echo -n "Script already exists. Do you really want to overwrite [y/Y/N]? "
						read choice
						if [ "$choice" = "y" ]
						then
							cp $script $home
						elif [ "$choice" = "Y" ]
						then
							cp $script $home
							yesallcheck=1
						fi
					else
						cp $script $home
					fi
				done
				rm -r $tmp
			;;
		esac
	;;
	*)
		print_man
	;;
esac
